//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:root@localhost:5442/api"
}

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('create', true)
/// @@allow('all', true)
/// @@allow('all', true)
model User {
  id                    String         @id() @default(uuid())
  name                  String?
  email                 String?        @unique()
  pictureUrl            String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation       String?
  status                UserStatus     @default(VERIFIED)
  globalRole            String         @default("USER")
  /// @password
  /// @omit
  password              String?
  autoAttendanceEnabled Boolean        @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt()
  teamsAsManager        Team[]         @relation("manager")
  teamMembers           TeamMember[]   @relation("user")
  attendances           Attendance[]   @relation("user")
  leaveRequests         LeaveRequest[] @relation("user")
}

/// @@allow('all', true)
model WorkShift {
  id                String   @id() @default(uuid())
  name              String?
  startTime         String?
  endTime           String?
  breakDuration     Float?
  overtimeThreshold Float?
  teamsAsShift      Team[]   @relation("shift")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OfficeLocation {
  id                    String       @id() @default(uuid())
  name                  String?
  address               String?
  latitude              String?
  longitude             String?
  radius                Float?
  attendancesAsLocation Attendance[] @relation("location")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Team {
  id             String       @id() @default(uuid())
  departmentName String?
  managerId      String?
  manager        User?        @relation(fields: [managerId], references: [id], name: "manager")
  shiftId        String?
  shift          WorkShift?   @relation(fields: [shiftId], references: [id], name: "shift")
  teamMembers    TeamMember[] @relation("team")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TeamMember {
  id        String   @id() @default(uuid())
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id], name: "team")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Attendance {
  id                String          @id() @default(uuid())
  checkInTime       String?
  checkOutTime      String?
  status            String?
  manualReason      String?
  isAutoEnabled     Boolean         @default(false)
  autoCheckInTime   DateTime?
  autoCheckOutTime  DateTime?
  autoLocation      String?
  autoStatus        String?
  isEmergencyMode   Boolean         @default(false)
  emergencyLocation String?
  userId            String?
  user              User?           @relation(fields: [userId], references: [id], name: "user")
  locationId        String?
  location          OfficeLocation? @relation(fields: [locationId], references: [id], name: "location")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model LeaveRequest {
  id          String   @id() @default(uuid())
  startDate   String?
  endDate     String?
  status      String?
  documentUrl String?
  reason      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}
